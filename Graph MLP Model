CALL gds.graph.create(
    'myGraph',
    {
        Influenza: {
            label: 'Infected',
            properties: 'class'
        }
    },
    '*'
);
 
CALL gds.beta.nodeSimilarity.stream('myGraph', {
    topK: 1,
    nodeWeightProperty: 'class',
    // The following parameters are set to produce a deterministic result
    randomSeed: 250,
    concurrency: 1,
    sampleRate: 1.0,
    deltaThreshold: 0.0
})
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).patient AS InfluenzaPatient1, gds.util.asNode(node2).patient AS InfluenzaPatient2, similarity
ORDER BY similarity DESCENDING, InfluenzaPatient1, InfluenzaPatient2;
 
CALL gds.beta.nodeSimilarity.stats('myGraph', {topK: 1, concurrency: 1, randomSeed: 42, nodeWeightProperty: 'class'})
YIELD nodesCompared, similarityPairs;
 
CALL gds.beta.nodeSimilarity.mutate('myGraph', {
    mutateRelationshipType: 'SIMILAR',
    mutateProperty: 'score',
    topK: 1,
    randomSeed: 42,
    concurrency: 1,
    nodeWeightProperty: 'class'
})
YIELD nodesCompared, relationshipsWritten;
 
CALL gds.beta.nodeSimilarity.write('myGraph', {
    writeRelationshipType: 'SIMILAR',
    writeProperty: 'score',
    topK: 1,
    randomSeed: 42,
    concurrency: 1,
    nodeWeightProperty: 'class'
})
YIELD nodesCompared, relationshipsWritten;
 

CALL gds.beta.pipeline.nodeClassification.create('pipe');
 

CALL gds.graph.create(
  'Influenza',
  'Infected',
  {
    SIMILAR: {
      orientation: 'UNDIRECTED',
      properties: 'score'
    }
  },
  { nodeProperties: ['class','Age','Cough','Malaise','Runnynose','Chill'] }
)
CALL gds.fastRP.stream('Influenza',
  {
    embeddingDimension: 4,
    randomSeed: 42
  }
)
YIELD nodeId, embedding;

CALL gds.fastRP.stats('Influenza', { embeddingDimension: 8 })
YIELD nodeCount

CALL gds.fastRP.mutate(
  'COVID-19',
  {
    embeddingDimension: 8,
    mutateProperty: 'fastRP'
  }
)
YIELD nodePropertiesWritten;

CALL gds.fastRP.write(
  'COVID-19',
  {
    embeddingDimension: 8,
    writeProperty: 'fastRP'
  }
)
YIELD nodePropertiesWritten;


CALL gds.beta.pipeline.nodeClassification.addNodeProperty('pipe', 'scaleProperties', {
  nodeProperties: 'Age'
  scaler: 'MinMax',
  mutateProperty:'ScaledAge'
})
YIELD name, nodePropertySteps



CALL gds.beta.pipeline.nodeClassification.selectFeatures('pipe', ['class','Age','Cough','Malaise','Runnynose','Chill','ScaledAge','FastRP'])
YIELD name, featureProperties;
 
CALL gds.beta.pipeline.nodeClassification.configureSplit('pipe', {
 testFraction: 0.2,
  validationFolds: 10
})
YIELD splitConfig;
 
 CALL gds.alpha.pipeline.nodeClassification.addMLP('pipe', {classWeights: [0.8,0.2], focusWeight: 0.5,learning rate:0.001, patience:2,tolerance:0.001,hiddenLayerSizes:5)
YIELD parameterSpace

CALL gds.alpha.pipeline.nodeClassification.configureAutoTuning('pipe', {
  maxTrials: 2
}) YIELD autoTuningConfig


CALL gds.beta.pipeline.nodeClassification.train.estimate('myGraph', {
  pipeline: 'pipe',
  nodeLabels: ['Influenza'],
  modelName: 'nc-model',
  targetProperty: 'class',
  randomSeed: 42,
  metrics: [ 'ACCURACY','F1_WEIGHTED' ]
})
YIELD requiredMemory;
 
CALL gds.beta.pipeline.nodeClassification.train('myGraph', {
  pipeline: 'pipe',
  nodeLabels: ['Influenza'],
  modelName: 'nc-pipeline-model',
  targetProperty: 'class',
  randomSeed: 42,
  metrics: ['ACCURACY','F1_WEIGHTED']
}) YIELD modelInfo, modelSelectionStats
RETURN
  modelInfo.bestParameters AS winningModel,
  modelInfo.metrics.F1_WEIGHTED.train.avg AS avgTrainScore,
  modelInfo.metrics.F1_WEIGHTED.outerTrain AS outerTrainScore,
  modelInfo.metrics.F1_WEIGHTED.test AS testScore,
  [cand IN modelSelectionStats.modelCandidates | cand.metrics.F1_WEIGHTED.validation.avg] AS validationScores



CALL gds.beta.pipeline.linkPrediction.create('pipe');
CALL gds.beta.pipeline.linkPrediction.addNodeProperty('pipe', 'Cosine', {
  mutateProperty: 'embedding',
  embeddingDimension: 256,
  randomSeed: 42
});

CALL gds.beta.pipeline.linkPrediction.addFeature('pipe', 'hadamard', {
  nodeProperties: ['embedding', 'age','class','Age','Cough','Malaise','Runnynose','Chill','cosinescore']
}) YIELD featureSteps;
CALL gds.beta.pipeline.linkPrediction.configureSplit('pipe', {
  testFraction: 0.45,
  trainFraction: 0.55,
  validationFolds: 10
})
YIELD splitConfig;

CALL gds.alpha.pipeline.linkPrediction.addMLP('pipe',
{hiddenLayerSizes: [11], patience: 10, learningrate: 0.005, classWeights: [0.55, 0.45], focusWeight: 0.07048, tolerance:0.001)
YIELD parameterSpace;
CALL gds.alpha.pipeline.linkPrediction.configureAutoTuning('pipe', {
  maxTrials: 2
}) YIELD autoTuningConfig;

CALL gds.beta.pipeline.linkPrediction.train('myGraph', {
  pipeline: 'pipe',
  modelName: 'lp-pipeline-model',
  metrics: ['ACCURACY'],
  targetRelationshipType: 'Cosinescore',
  randomSeed: 12
}) YIELD modelInfo, modelSelectionStats
RETURN
  modelInfo.bestParameters AS winningModel,
  modelInfo.metrics.ACCURACY'.train.avg AS avgTrainScore,
  modelInfo.metrics.ACCURACY'.outerTrain AS outerTrainScore,
  modelInfo.metrics.ACCURACY'.test AS testScore,
  [cand IN modelSelectionStats.modelCandidates | cand.metrics.ACCURACY'.validation.avg] AS validationScores

